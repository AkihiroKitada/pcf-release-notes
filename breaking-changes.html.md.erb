---
title: PCF v2.3 Breaking Changes
owner: Release Engineering
---

This topic describes the breaking changes you need to be aware of when upgrading to Pivotal Cloud Foundry (PCF) v2.3. For more information about important preparation steps you must follow before beginning an upgrade, see [Upgrading Pivotal Cloud Foundry](http://docs.pivotal.io/2-3/customizing/upgrading-pcf.html).


## <a id='pas'></a> Pivotal Application Service (PAS)

### <a id="readonly-volume-mounts"></a> Read-only Volume Mounts

We back-ported a fix from NFS 1.3.1 to NFS 1.2.1 for an incompatibility between our NFS Volume release and Diego's container runtime, garden. But, because the fix was in the NFS Service Broker, and service bindings created by old versions of this broker won't get migrated during upgrade, existing NFS service bindings that specify read-only mounts will still exhibit the incompatibility.

As a result, customers upgrading from versions containing nfs-volume-release < 1.2.1 that have NFS services bound read-only to their applications will see that their applications crash after upgrade.

To fix this condition, customers should unbind the service, rebind it, and then restage the application.

Alternately, customers wishing to avoid application down time can temporarily re-bind their applications as read/write before upgrading, and then swtich to read-only afterwards.

### <a id='cflinuxfs3'></a>Tile Authors Must Manually Migrate Apps to cflinuxfs3

PAS v2.3.0 includes both the cflinuxfs2 and cflinuxfs3 stacks.
Pivotal recommends pushing all apps using the cflinuxfs3 stack for better performance and compatibility with future versions of PAS.

If your tile contains errands that push apps, such as service brokers, you must manually configure the errands to push apps using the cflinuxfs3 stack.
To maintain compatibility with PAS v2.2, you must also configure the errands to push apps using cflinuxfs2 if the cflinuxfs3 stack is not available.

To ensure that your tile is compatible with both PAS v2.2 and PAS v2.3, you must configure apps to use the cflinuxfs3 stack when it is available and use cflinuxfs2 when it is not available.

Run `cf stacks` to see which stacks are available.
Based on the output, do one of the following:

* If cflinuxfs3 is available, do either of the following to push the app with cflinuxfs3:
  * Run `cf push -s cflinuxfs3 MY-APP`, replacing `MY-APP` with the name of your app.
  * Specify `stack: cflinuxfs3` in the app manifest.

* If cflinuxfs3 is not available, do either of the following to push the app with cflinuxfs2:
  * Run `cf push -s cflinuxfs2 MY-APP`, replacing `MY-APP` with the name of your app.
  * Run `cf push MY-APP`, replacing `MY-APP` with the name of your app.

## <a id='opsman'></a> PCF Operations Manager (Ops Manager)

## <a id='ist'></a> PCF Isolation Segment

TODO
