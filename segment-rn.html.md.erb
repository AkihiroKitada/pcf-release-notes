---
title: PCF Isolation Segment v2.1 Release Notes
owner: Release Engineering
---

## <a id='releases'></a> Releases

### <a id='2.1.0'></a> 2.1.0

 <table border="1" class="nice">
 <thead> <tr>
   <th>Component</th>
   <th>Version</th>
 </tr>
 </thead>
 <tbody>
 <tr>
   <td>Stemcell</td><td>3541.8</td>
 </tr><tr>
   <td>cf-networking</td><td>1.10.0</td>
 </tr><tr>
   <td>cflinuxfs2</td><td>1.188.0</td>
 </tr><tr>
   <td>consul</td><td>191</td>
 </tr><tr>
   <td>diego</td><td>1.35.0</td>
 </tr><tr>
   <td>garden-runc</td><td>1.11.1</td>
 </tr><tr>
   <td>haproxy</td><td>8.6.0</td>
 </tr><tr>
   <td>loggregator</td><td>101.5\*</td>
 </tr><tr>
   <td>nfs-volume</td><td>1.2.0</td>
 </tr><tr>
   <td>routing</td><td>0.172.0</td>
 </tr><tr>
   <td>syslog-migration</td><td>11.1.0</td>
 </tr>
 </tbody>
 <tfoot>
 <tr>
   <td colspan="2"><em>\* Components marked with an asterisk have been patched to resolve security vulnerabilities or fix component behavior.</em></td>
 </tr>
 </tfoot>
 </table>

## <a id='intro'></a> About PCF Isolation Segment

The PCF Isolation Segment v2.1 tile is available for installation with PCF
v2.1.

[Isolation segments](http://docs.pivotal.io/pivotalcf/2-1/concepts/security.html#isolation-segments) provide
dedicated pools of resources where you can deploy apps and  isolate workloads.
Using isolation segments separates app resources as completely as if they were
in different CF deployments but avoids redundant management and network
complexity.

For more information about using isolation segments in your deployment, see the
[Managing Isolation Segments](https://docs.pivotal.io/pivotalcf/2-1/adminguide/isolation-segments.html) topic.

## <a id='install'></a> How to Install

The procedure for installing PCF Isolation Segment v2.1 is documented in the
[Installing PCF Isolation Segment](https://docs.pivotal.io/pivotalcf/2-1/customizing/installing-pcf-is.html) topic.

To install a PCF Isolation Segment, you must first install PCF v2.1.

## <a id='2.1.0'></a> New Features in PCF Isolation Segment v2.1

### <a id='route-consistency'></a> Increased Resiliency, Consistency, and Security for HTTP Routing

Gorouter now uses TLS to verify app identity and communicate with app containers by default.
This improves resiliency and consistency for app routes as well as increases security by encrypting data in flight from Gorouter to back ends.
For more information about the new feature, see [TLS to Apps and Other Back-End Services](https://docs.pivotal.io/pivotalcf/2-1/concepts/http-routing.html#tls-to-back-end) and [Preventing Misrouting](https://docs.pivotal.io/pivotalcf/2-1/concepts/http-routing.html#consistency).

You can change this setting by disabling the **Router uses TLS to verify application identity** checkbox in the **Networking** pane of the PCF Isolation Segment tile.
Disabling it sets Gorouter to send traffic unencrypted and rely on pruning to maintain its routing table.

### <a id='keepalive-connections'></a> Gorouter Keepalive Connections to Backends Enabled by Default

In PCF Isolation Segment v2.1, the **Router Max Idle Keepalive Connections** field in the **Networking** pane of the PCF Isolation Segment tile has been replaced by the **Enable Keepalive Connections for Router** checkbox. For more information about configuring keepalive connections, see [Installing PCF Isolation Segment](https://docs.pivotal.io/pivotalcf/2-1/customizing/installing-pcf-is.html#networking).

To improve routing performance, the checkbox is enabled by default. When keepalive connections are enabled, Gorouter maintains established TCP connections to backends.
The maximum number of idle keepalive connections maintained by Gorouter to all backends is set to 49,000.
For more information, see [Keepalive Connections](https://docs.pivotal.io/pivotalcf/2-1/concepts/http-routing.html#keepalive).

### <a id='hsts-haproxy'></a> HSTS Support for HAProxy

You can now enable HTTP Strict Transport Security (HSTS) for HAProxy.

### <a id='cipher-defaults'></a> Pre-Populated TLS Cipher Defaults for Gorouter and HAProxy

For new installations of PAS v2.1, the **TLS Cipher Suites for Router** and **TLS Cipher Suites for HAProxy**
fields in the **Networking** pane are automatically populated with the following values:

* Defaults for Gorouter:<br>`ECDHE-RSA-AES128-GCM-SHA256:TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384`
* Defaults for HAProxy:<br>`TLS_DHE_RSA_WITH_AES_128_GCM_SHA256:TLS_DHE_RSA_WITH_AES_256_GCM_SHA384:TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256:TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384`

<p class='note'><strong>Note:</strong> If you are using AWS Classic Load Balancers,
see <a href="http://docs.pivotal.io/pivotalcf/2-1/adminguide/securing-traffic.html#default">TLS Cipher Suite Support by AWS Load Balancers</a>
for information about configuring your AWS load balancers and Gorouter.</p>

For upgrades, PAS populates the **TLS Cipher Suites for Router** and **TLS Cipher Suites for HAProxy** fields with the values specified in your previous version of the PAS tile.
For information about configuring these fields, see the PAS configuration documentation for your IaaS:

* [Configuring PAS for AWS](https://docs.pivotal.io/pivotalcf/2-1/customizing/pcf-aws-manual-er-config.html#networking)
* [Deploying PAS on Azure](https://docs.pivotal.io/pivotalcf/2-1/customizing/azure-er-config.html#networking)
* [Deploying PAS on GCP](https://docs.pivotal.io/pivotalcf/2-1/customizing/gcp-er-config.html#networking)
* [Installing PAS after Deploying PCF on OpenStack](https://docs.pivotal.io/pivotalcf/2-1/customizing/openstack-er-config.html#networking)
* [Configuring PAS for vSphere](https://docs.pivotal.io/pivotalcf/2-1/customizing/config-er-vmware.html#networking)

### <a id='healthchecks'></a> Improved System Performance for App Health Checks

This release changes how PCF Isolation Segment runs app health checks to improve
system performance in resource-constrained environments, such as on-premise
installations of PCF. This change does not impact the developer workflow for
[configuring app health checks](https://docs.pivotal.io/pivotalcf/2-1/devguide/deploy-apps/healthchecks.html).

Previously, health checks during app startup increased system load because they
ran as a Garden process every two seconds. In addition, apps that started successfully
could fail if slow system performance caused the app health check to
time out. In some severe cases, such app failures caused additional resource
consumption and a chain-reaction of app failures.

PCF Isolation Segment v2.1 resolves these issues through a new implementation that does not
invoke a new process on every health check. The health check now runs
as a long-lived process in the app container. Developers may see these
processes if they access an app container using the `cf ssh` command and list the
processes.


## <a id='adv-features'></a> About Advanced Features

The Advanced Features section of the PAS tile includes new functionality that may have certain constraints.

Although these features are fully supported, Pivotal recommends caution when using them in production.
