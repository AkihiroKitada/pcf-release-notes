---
title: Pivotal Elastic Runtime v1.9 Release Notes
owner: Release Engineering
---

## <a id='versions'></a> Component Versions

Versions 1.9.0 and higher versions of Elastic Runtime consist of the following component versions:

<table border="1" class="nice">
  <thead>
  <tr>
    <th>Component</th>
    <th>Version</th>
  </tr>
  </thead>
  <tbody>
  <tr>
    <td>Stemcell</td><td>3309</td>
  </tr><tr>
    <td>binary-buildpack</td><td>1.0.5</td>
  </tr><tr>
    <td>capi</td><td>1.11.0</td>
  </tr><tr>
    <td>cf</td><td>246</td>
  </tr><tr>
    <td>cf-autoscaling</td><td>67</td>
  </tr><tr>
    <td>cf-mysql</td><td>32</td>
  </tr><tr>
    <td>cflinuxfs2-rootfs</td><td>1.40.0</td>
  </tr><tr>
    <td>consul</td><td>137</td>
  </tr><tr>
    <td>diego</td><td>0.1490.0</td>
  </tr><tr>
    <td>dotnet-core-buildpack</td><td>1.0.5</td>
  </tr><tr>
    <td>etcd</td><td>85</td>
  </tr><tr>
    <td>garden-runc</td><td>1.0.3</td>
  </tr><tr>
    <td>go-buildpack</td><td>1.7.15</td>
  </tr><tr>
    <td>java-offline-buildpack</td><td>3.10</td>
  </tr><tr>
    <td>loggregator</td><td>65</td>
  </tr><tr>
    <td>mysql-backup</td><td>1.28.0</td>
  </tr><tr>
    <td>mysql-monitoring</td><td>6</td>
  </tr><tr>
    <td>nats</td><td>14</td>
  </tr><tr>
    <td>nodejs-buildpack</td><td>1.5.23</td>
  </tr><tr>
    <td>notifications</td><td>26</td>
  </tr><tr>
    <td>notifications-ui</td><td>22</td>
  </tr><tr>
    <td>php-buildpack</td><td>4.3.22</td>
  </tr><tr>
    <td>pivotal-account</td><td>1</td>
  </tr><tr>
    <td>postgres</td><td>8</td>
  </tr><tr>
    <td>push-apps-manager-release</td><td>659.5</td>
  </tr><tr>
    <td>python-buildpack</td><td>1.5.12</td>
  </tr><tr>
    <td>routing</td><td>0.141.0</td>
  </tr><tr>
    <td>ruby-buildpack</td><td>1.6.28</td>
  </tr><tr>
    <td>service-backup</td><td>17.2.0</td>
  </tr><tr>
    <td>staticfile-buildpack</td><td>1.3.13</td>
  </tr><tr>
    <td>uaa</td><td>22</td>
  </tr>
  </tbody>
  </table>

## <a id='upgrade'></a>How to Upgrade

The procedure for upgrading to Pivotal Cloud Foundry Elastic Runtime v1.9 is documented in the [Upgrading Pivotal Cloud Foundry](../../customizing/upgrading-pcf.html) topic.

When upgrading to v1.9, be aware of the following upgrade considerations:

   * Before upgrading to PCF v1.9, remove any product tiles that are no longer supported in PCF. See [Review and Remove Unsupported Products](../../customizing/upgrading-pcf.html#remove-products).<br><br/>
    Some partner service tiles may currently be incompatible with PCF v1.9. Pivotal is working with partners to ensure their tiles are being updated to work with the latest versions of PCF. <br/><br/>
    For information about which partner service releases are currently compatible with PCF v1.9, review the appropriate partners services release documentation at [http://docs.pivotal.io](http://docs.pivotal.io), or contact the partner organization that produces the tile.
   * Before upgrading to PCF v1.9, ensure that you have adequate space available on your database server. See [Diego and Routing API Migrate to a Relational Datastore](#diego_and_routing) and [Cloud Foundry API Availability During Upgrade](database-migrations).
   * Due to the Cloud Foundry API database migration, the CF API will return 500 status codes while the Cloud Controller VMs are being upgraded. In addition, V3 service bindings are removed without notifying the related broker. Pivotal recommends deleting any V3 service bindings before upgrading.

## <a id='1.9.0'></a> New Features in Elastic Runtime v1.9.0

This section describes new features of the release.

### <a id='security'></a>Security Improvements for Intercomponent Communication

The etcd cluster now uses TLS for all communication between servers and clients.

To support the migration from unencrypted to encrypted communication, existing etcd servers are converted into proxies. These proxies allow connections from clients that still communicate unencrypted.

<p class="note"><strong>Important</strong>: The etcd proxy needs to remain deployed until such time as all clients in your deployment have switched to encrypted communications.</p>

Additionally, the Diego Cell VMs now provide a secured API endpoint to communicate with the Diego Brain VM. The Cells provide both encrypted and unencrypted channels of communication in this release.

A complete switch-over to TLS for this communication channel will follow in a subsequent release.

### <a id='containers'></a>Containers Default to Running Unprivileged

In PCF v1.9, all newly staged containers run as unprivileged containers.

Unprivileged containers are a security technique of mapping the root user inside the container to a regular user who has no privileges at the linux operating system level. This prevents apps from inheriting root access on the host if an app breaks out of the container.

By using the full set of user-namespacing features in Linux, PCF isolates containers sharing the same host.

### <a id='diego_and_routing'></a>Diego and Routing API Migrate to a Relational Datastore

Both Diego and the Routing API datastores have switched over to using a relational database as their backing store. Both Diego and Routing API use the same  database, either internal MySQL or external database, that you configure during a new deployment of Elastic Runtime.

#### Diego Relational Store

Diego no longer uses etcd as a backend datastore.

#### Routing API Relational Store

In terms of upgrade, only deployments with the TCP routing feature enabled in PCF v1.8 are impacted. When those deployments are upgraded from PCF v1.8 to PCF v1.9, the upgrade process migrates existing routing API data automatically. 

### <a id='database-migrations'></a>Cloud Foundry API Availability During Upgrade

The database backing the CF API performs a backwards-incompatible migration when upgrading from 1.8.x. The purpose of this large database migration is to prepare for the release of the Cloud Controller V3 API.

During the migration, you should expect to see 500 status codes from the API while the Cloud Controller VMs are being deployed.

Here are a couple things to note before performing the upgrade:

  * Ensure there is adequate space available on the database server. This depends on the type of database you use and the amount of data you are migrating. For example, Postgres creates copy tables that can temporarily consume double the size of the apps table.

  * V3 service bindings are removed without notifying the related broker. Pivotal recommends deleting any V3 service bindings before upgrading.

### <a id='one-off'></a>Support for Running One-Off Tasks

In addition to managing long-running processes, PCF now has first-class support for running one-off tasks.

Tasks are useful to application developers looking to perform defined operations with finite lifetimes such as database migrations, batch jobs, or seeding blobstores.

The task itself is guaranteed by the platform to run at most once and results in either a success or failure status.

When a task is executed, it inherits the environment of its associated application, including environment variables and filesystem.

### <a id='net-core'></a>.NET Core Buildpack

The .NET Core Buildpack is now included as a core buildpack for application developers. This buildpack is used by applications running .NET Core on Linux.

The buildpack is only new for operators who have not already upgraded to Elastic Runtime v1.8.13 or higher.

### <a id='actuators'></a>Support for Spring Boot Actuators in Apps Manager

Apps Manage now securely integrates the `/health`, `/info`, and `/logger` Spring Boot actuators.

If an app is configured with these actuators, users will see the following in Apps Manager:

* **Info**: git commit information will be available in the app page header, and on the app settings tab. Raw output of the `info` actuator is also available on the app settings tab.
* **Health**: the output of the `health` actuator for each instance will be displayed in the instances table on the summary tab of an app. The instance rows can be expanded to show the full details of the `health` endpoint for any instance.
* **Logger**: On the logs tab, the **Configure Logging** button will appear, allowing the user to temporarily configure log levels for the application's loggers without a push or restart.

For more information, see the documentation for [Spring Boot Actuators](../console/spring-boot-actuators.html) and [Using Actuators](../console/using-actuators.html).

### <a id='autoscaling'></a>New Autoscaling Features

The autoscaling service provides new scaling metrics for application developers.

In addition to `CPU Utilization`, the service now supports `HTTP Throughput` and `HTTP Latency` as metrics to decide application scaling events.

* `HTTP Throughput` measures the number of incoming HTTP requests per second per application instance.
* `HTTP Latency` measures application response latency at the 99th and 95th percentiles.

For all metrics, application developers can set upper and lower thresholds to decide whether the service should scale the application.

All metrics are computed as a 30-second rolling average. With the new **Standard** plan, rules are evaluated every 5 seconds.

The autoscaling service now also allows for multiple metrics to be combined for a single application.

Finally, to facilitate the automation of the interactions with the autoscaling service, the service now supports a REST-based API to manage your application scaling configuration.

### <a id='zipkin'></a>Zipkin Tracing Headers

With the Zipkin tracing option enabled, the router attaches tracing headers to incoming requests.

Enabling this option allows application developers who have Zipkin-compatible instrumentation in their application to trace requests as they traverse the platform.

For more information, see [Enabling Zipkin Tracing](../adminguide/zipkin_tracing.html).

## <a id='knownissues'></a>Known Issues

###<a id='newissues'></a>New Issues

###<a id='existingissues'></a>Existing Issues


